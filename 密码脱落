这些密码是由A、B、C、D 四种植物的种子串成的序列。
仔细分析发现，这些密码串当初应该是前后对称的（也就是我们说的镜像串）。
由于年代久远，其中许多种子脱落了，因而可能会失去镜像的特征。
你的任务是：给定一个现在看到的密码串，计算一下从当初的状态，它要至少脱落多少个种子，才可能会变成现在的样子。
输入格式
共一行，包含一个由大写字母ABCD构成的字符串，表示现在看到的密码串。
输出格式
输出一个整数，表示至少脱落了多少个种子。
数据范围
输入字符串长度不超过1000
#include<cstdio>
#include<cstring>
using namespace std;
/*
 理解题意
 转化：对称镜像+单个的数量，单个数量即为所加
       现在删除多少单个数量 成对称镜像
 f[l][r]表示从第l到r个回文子序列的集合
 属性最大值
 分四种
 l,r取 f[l][r]=f[l-1]f[r+1]+2
 l,r取一个 =f[l][r-1]/f[l-1][r]
 l,r均不取 = f[[l-1][r-1]包含在上式中，不要

*/
const int N =  1010;
char s[N];
int f[N][N];

int main()
{
    scanf("%s",s);
    int n=strlen(s);
    for(int len=1;len<=n;len++)
      for(int l=0;l+len-1<n;l++)
      {
        int r = l+len-1;
        if(len == 1) f[l][r] = 1;
        else
        {
            if(s[l]==s[r]) f[l][r] = f[l+1][r-1] + 2;
            if(f[l][r-1]>f[l][r]) f[l][r] = f[l][r-1];
            if(f[l+1][r]>f[l][r]) f[l][r] = f[l+1][r]; 
        }
      }

    printf("%d\n",n-f[0][n-1]);
    return 0;
